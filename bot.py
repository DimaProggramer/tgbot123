from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiocryptopay import AioCryptoPay, Networks
import os
import asyncio
from PIL import Image, ImageDraw, ImageFont
import requests
from decimal import Decimal
import sqlite3
from functions import *
from database_functions import *
API_TOKEN = ""
ADMIN_IDS = ("", "")
CHANNEL_ID = 
CHANNEL_LINK = ""
IMAGES_DIR = "broadcast_images"
if not os.path.exists(IMAGES_DIR):
    os.makedirs(IMAGES_DIR)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


conn = sqlite3.connect("bot_data.db")
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS broadcasts (id INTEGER PRIMARY KEY, text TEXT)''')
conn.commit()

class Form(StatesGroup):
    waiting_for_content = State()
    waiting_for_news_number = State()
    change_news_settings = State()

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status in ["member", "administrator", "creator"]:
            insert_user(user_id)

            kb = types.InlineKeyboardMarkup(row_width=1).add(
                types.InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_panel"),
                types.InlineKeyboardButton("üí≤ –ü—Ä–∞–π—Å", callback_data="show_price"),
                types.InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="buy_soft"),
                types.InlineKeyboardButton("üë©‚Äçüíª –¢/–ü", callback_data="tech"),
                types.InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="last_news")
            )
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", reply_markup=kb)
        else:
            await message.answer(
                "üö´ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n"
                f"[–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª]({CHANNEL_LINK})\n",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
                ),
                parse_mode='Markdown'
            )
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(e)


@dp.callback_query_handler(text="check_subscription")
async def check_subscription(call: types.CallbackQuery):
    user_id = call.from_user.id
    try:
        member = await bot.get_chat_member(CHANNEL_ID, user_id)
        if member.status in ["member", "administrator", "creator"]:
            insert_user(user_id)

            await call.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
            kb = types.InlineKeyboardMarkup(row_width=1).add(
                types.InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_panel"),
                types.InlineKeyboardButton("üí≤ –ü—Ä–∞–π—Å", callback_data="show_price"),
                types.InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="buy_soft"),
                types.InlineKeyboardButton("üë©‚Äçüíª –¢/–ü", callback_data="tech"),
                types.InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="last_news")
            )
            await call.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=kb)
        else:
            await call.answer("üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
    except Exception as e:
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
        print(e)


@dp.callback_query_handler(lambda call: call.data == "user_panel")
async def user_panel(call: types.CallbackQuery):
    user_id = call.from_user.id
    await call.message.answer(
        f"üí∞ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\nüë§ ID: {user_id}",
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu")
        )
    )


@dp.callback_query_handler(lambda call: call.data == "tech")
async def tech_support(call: types.CallbackQuery):
    user_id = call.from_user.id
    await call.message.answer(
        f"–¢–µ–∫—Å—Ç –¢/–ü",
        reply_markup=types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu")
        )
    )


@dp.message_handler(commands=["admin_panel"])
async def admin_panel(message: types.Message):
    user_id = message.from_user.id
    if str(user_id) not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return
    
    kb = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="send_broadcast"),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_statistics"),
        types.InlineKeyboardButton("üÜï–ü–µ—Ä–µ—É—á–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", callback_data="inventory"),
        types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu"),
    )
    await message.reply(f"üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb)


@dp.callback_query_handler(lambda call: call.data == "inventory")
async def recount_news(call: types.CallbackQuery):
    news = get_last_news_from_db()
    if news:
        news_texts = []
        callback_data = None

        for idx, item in enumerate(news, start=1):
            news_texts.append(f"{idx}. {item[1]}")
            if not callback_data:
                callback_data = f'delete_news_{item[0]}'

        final_news_text = "\n".join(news_texts)

        inline_kb = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üöÆ –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å", callback_data=callback_data)
        )

        await call.message.answer(final_news_text, reply_markup=inline_kb)
    else:
        await call.message.answer("–∏–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –±–∞–∑—ã, –∏–ª–∏ —Ç—É—Ç —Ä–µ–∞–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç—É")
    await call.answer()


@dp.callback_query_handler(lambda call: call.data == "show_price")
async def show_price(call: types.CallbackQuery):
    text = "üí≤ –ü—Ä–∞–π—Å –Ω–∞ —Å–æ—Ñ—Ç:\n\n"
    kb = types.InlineKeyboardMarkup(row_width=1)
    
    for file, details in SOFT_DATA["soft"].items():
        text += f"üîπ {details['name']} ‚Äî {details['price_rub']} RUB\nüìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {details['description']}\n"
    user_id = call.message.from_user.id
    kb.add(types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu"))
    await call.message.reply(text, reply_markup=kb)


@dp.callback_query_handler(lambda call: call.data.startswith("buy_soft"))
async def process_payment(call: types.CallbackQuery):
    user_id = call.from_user.id
    kb = types.InlineKeyboardMarkup(row_width=1)
    
    for file, details in SOFT_DATA["soft"].items():
        kb.add(types.InlineKeyboardButton(f"üõí {details['name']}", callback_data=f"pay:{file}"))
    
    kb.add(types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu"))
    await call.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ñ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=kb)


@dp.callback_query_handler(lambda call: call.data.startswith("pay"))
async def handle_payment(call: types.CallbackQuery):
    file_name = call.data.split(":")[1]
    kb = types.InlineKeyboardMarkup(row_width=1)

    for asset in ["TON", "BTC", "ETH", "USDT"]: 
        kb.add(types.InlineKeyboardButton(f"üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ {asset}", callback_data=f"confirm_pay:{file_name}:{asset}"))
    
    kb.add(types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu"))
    await call.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

@dp.callback_query_handler(lambda call: call.data.startswith("confirm_pay"))
async def confirm_payment(call: types.CallbackQuery):
    await call.message.delete()
    _, file_name, asset = call.data.split(":")
    user_id = call.from_user.id
    price_rub = Decimal(SOFT_DATA["soft"][file_name]["price_rub"])

    crypto_rate = get_conversion_rate(asset.upper())
    if crypto_rate:
        crypto_rate_decimal = Decimal(crypto_rate)
        price_crypto = price_rub / crypto_rate_decimal
    else:
        price_crypto = Decimal(99999999999)

    price_crypto_float = float(price_crypto)

    invoice = await crypto_client.create_invoice(
        asset=asset,
        amount=price_crypto_float,
        description=f"–ü–æ–∫—É–ø–∫–∞ {SOFT_DATA['soft'][file_name]['name']}"
    )
    payment_link = invoice.pay_url
    await call.message.answer(f"üíµ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ {asset}:\n{payment_link}")
    await asyncio.create_task(check_payment(invoice.invoice_id, file_name, user_id, call.message))

async def check_payment(invoice_id, file_name, user_id, message):
    for _ in range(36):
        global crypto_client
        invoices = await crypto_client.get_invoices(invoice_ids=[invoice_id])
        if invoices and invoices[0].status == 'paid':
            response_message = await send_file_info(user_id, file_name)
            await bot.send_message(user_id, response_message)
            return
        await asyncio.sleep(5)
    await bot.send_message(user_id, "‚è∞ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–ª–∞—Ç—ë–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à—ë–Ω.")

@dp.callback_query_handler(lambda call: call.data == "return_to_menu")
async def return_to_menu(call: types.CallbackQuery):
    user_id = call.from_user.id
    kb = types.InlineKeyboardMarkup(row_width=1).add(
        types.InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_panel"),
        types.InlineKeyboardButton("üí≤ –ü—Ä–∞–π—Å", callback_data="show_price"),
        types.InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data="buy_soft"),
        types.InlineKeyboardButton("üë©‚Äçüíª –¢/–ü", callback_data="tech"),
        types.InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="last_news")
    )
    await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb)

@dp.message_handler(commands=["post"])
async def start_command(message: types.Message):
    if str(message.from_user.id) in ADMIN_IDS:
        await message.reply("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ:")
        user_data[message.from_user.id] = {"photo": None, "text": None, "link": None}
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    if message.from_user.id in user_data and user_data[message.from_user.id]["photo"] is None:
        user_data[message.from_user.id]["photo"] = message.photo[-1].file_id
        await message.reply("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:")

@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    if message.from_user.id in user_data:
        if user_data[message.from_user.id]["photo"] is None:
            await message.reply("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:")
        elif user_data[message.from_user.id]["text"] is None:
            user_data[message.from_user.id]["text"] = message.text
            await message.reply("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        elif user_data[message.from_user.id]["link"] is None:
            user_data[message.from_user.id]

@dp.callback_query_handler(lambda call: call.data == "send_broadcast")
async def send_broadcast(call: types.CallbackQuery):
    user_id = call.from_user.id
    if str(user_id) not in ADMIN_IDS:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await Form.waiting_for_content.set()


@dp.message_handler(state=Form.waiting_for_content, content_types=['text', 'photo'])
async def process_broadcast(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if str(user_id) not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    content = message.text or message.caption
    cursor.execute("INSERT INTO broadcasts (text) VALUES (?)", (content,))
    conn.commit()

    photo_path = None
    if message.photo:
        photo = message.photo[-1]
        photo_path = os.path.join(IMAGES_DIR, f"broadcast_{photo.file_id}.jpg")
        await photo.download(photo_path)
    user_ids = cursor.execute("SELECT user_id FROM users").fetchall()
    for (user_id,) in user_ids:
        try:
            if photo_path:
                await bot.send_photo(user_id, photo=open(photo_path, 'rb'), caption=content)
            else:
                await bot.send_message(user_id, text=content)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('delete_news_'))
async def confirm_delete_news(callback_query: types.CallbackQuery):
    news_id = callback_query.data.split('_')[-1]
    await bot.answer_callback_query(callback_query.id)

    await Form.waiting_for_news_number.set()
    async with dp.current_state(user=callback_query.from_user.id).proxy() as data:
        data['news_id'] = news_id

    await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–æ—Ç–º–µ–Ω–∞ —á—Ç–æ–±—ã –≤—ã–π—Ç–∏):")

@dp.message_handler(state=Form.waiting_for_news_number)
async def delete_news(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        news_id = data['news_id']

    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("üîô–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        try:
            news_id = int(news_id)
            cursor.execute("DELETE FROM broadcasts WHERE id=?", (news_id,))
            conn.commit()
            await state.finish()
            kb = types.InlineKeyboardMarkup(row_width=1)
            kb.add(types.InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="return_to_menu"))
            await message.answer("üöÆ–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞.", reply_markup=kb)
        except ValueError:
            await message.answer("‚ùå–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–æ–≤–æ—Å—Ç–∏.")

@dp.callback_query_handler(lambda call: call.data == "show_statistics")
async def show_statistics(call: types.CallbackQuery):
    user_id = call.from_user.id
    if str(user_id) not in ADMIN_IDS:
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    
    total_users = cursor.execute("SELECT COUNT(*) FROM users").fetchone()[0]
    await call.message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    